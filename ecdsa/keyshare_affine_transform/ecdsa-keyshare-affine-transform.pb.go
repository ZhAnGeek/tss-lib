// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.3
// source: binance/tsslib/v2/protob/ecdsa-keyshare-affine-transform.proto

package keyshare_affine_transform

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a BROADCAST message sent during Round 1 of the ECDSA TSS key transform protocol.
type KTRound1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VHash []byte `protobuf:"bytes,1,opt,name=VHash,proto3" json:"VHash,omitempty"`
}

func (x *KTRound1Message) Reset() {
	*x = KTRound1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KTRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KTRound1Message) ProtoMessage() {}

func (x *KTRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KTRound1Message.ProtoReflect.Descriptor instead.
func (*KTRound1Message) Descriptor() ([]byte, []int) {
	return file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescGZIP(), []int{0}
}

func (x *KTRound1Message) GetVHash() []byte {
	if x != nil {
		return x.VHash
	}
	return nil
}

// Represents a BROADCAST message sent during Round 1 of the ECDSA TSS key transform protocol.
type KTRound2Message1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vs            [][]byte `protobuf:"bytes,1,rep,name=vs,proto3" json:"vs,omitempty"`
	Ai            [][]byte `protobuf:"bytes,2,rep,name=Ai,proto3" json:"Ai,omitempty"`
	Rid           []byte   `protobuf:"bytes,3,opt,name=rid,proto3" json:"rid,omitempty"`
	CmtRandomness []byte   `protobuf:"bytes,4,opt,name=cmtRandomness,proto3" json:"cmtRandomness,omitempty"`
}

func (x *KTRound2Message1) Reset() {
	*x = KTRound2Message1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KTRound2Message1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KTRound2Message1) ProtoMessage() {}

func (x *KTRound2Message1) ProtoReflect() protoreflect.Message {
	mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KTRound2Message1.ProtoReflect.Descriptor instead.
func (*KTRound2Message1) Descriptor() ([]byte, []int) {
	return file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescGZIP(), []int{1}
}

func (x *KTRound2Message1) GetVs() [][]byte {
	if x != nil {
		return x.Vs
	}
	return nil
}

func (x *KTRound2Message1) GetAi() [][]byte {
	if x != nil {
		return x.Ai
	}
	return nil
}

func (x *KTRound2Message1) GetRid() []byte {
	if x != nil {
		return x.Rid
	}
	return nil
}

func (x *KTRound2Message1) GetCmtRandomness() []byte {
	if x != nil {
		return x.CmtRandomness
	}
	return nil
}

// Represents a P2P message sent to each party during Round 2 of the ECDSA TSS key transform protocol.
type KTRound2Message2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Share []byte `protobuf:"bytes,1,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *KTRound2Message2) Reset() {
	*x = KTRound2Message2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KTRound2Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KTRound2Message2) ProtoMessage() {}

func (x *KTRound2Message2) ProtoReflect() protoreflect.Message {
	mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KTRound2Message2.ProtoReflect.Descriptor instead.
func (*KTRound2Message2) Descriptor() ([]byte, []int) {
	return file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescGZIP(), []int{2}
}

func (x *KTRound2Message2) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

// Represents a broadcast message sent to each party during Round 3 of the ECDSA TSS key transform protocol.
type KTRound3Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchProof [][]byte `protobuf:"bytes,1,rep,name=sch_proof,json=schProof,proto3" json:"sch_proof,omitempty"`
}

func (x *KTRound3Message) Reset() {
	*x = KTRound3Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KTRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KTRound3Message) ProtoMessage() {}

func (x *KTRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KTRound3Message.ProtoReflect.Descriptor instead.
func (*KTRound3Message) Descriptor() ([]byte, []int) {
	return file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescGZIP(), []int{3}
}

func (x *KTRound3Message) GetSchProof() [][]byte {
	if x != nil {
		return x.SchProof
	}
	return nil
}

var File_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto protoreflect.FileDescriptor

var file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x73, 0x73, 0x6c, 0x69, 0x62,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2f, 0x65, 0x63, 0x64, 0x73, 0x61,
	0x2d, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x65,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x31, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x73, 0x73, 0x6c, 0x69, 0x62,
	0x2e, 0x76, 0x32, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0x27, 0x0a, 0x0f, 0x4b, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6a, 0x0a, 0x10,
	0x4b, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x12, 0x0e, 0x0a, 0x02, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x02, 0x76, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x41, 0x69, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x02, 0x41, 0x69,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6d, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6d, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x28, 0x0a, 0x10, 0x4b, 0x54, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x22, 0x2e, 0x0a, 0x0f, 0x4b, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x42, 0x21, 0x5a, 0x1f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescOnce sync.Once
	file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescData = file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDesc
)

func file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescGZIP() []byte {
	file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescOnce.Do(func() {
		file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescData = protoimpl.X.CompressGZIP(file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescData)
	})
	return file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDescData
}

var file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_goTypes = []interface{}{
	(*KTRound1Message)(nil),  // 0: binance.tsslib.v2.ecdsa.keyshare_affine_transform.KTRound1Message
	(*KTRound2Message1)(nil), // 1: binance.tsslib.v2.ecdsa.keyshare_affine_transform.KTRound2Message1
	(*KTRound2Message2)(nil), // 2: binance.tsslib.v2.ecdsa.keyshare_affine_transform.KTRound2Message2
	(*KTRound3Message)(nil),  // 3: binance.tsslib.v2.ecdsa.keyshare_affine_transform.KTRound3Message
}
var file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_init() }
func file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_init() {
	if File_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KTRound1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KTRound2Message1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KTRound2Message2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KTRound3Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_goTypes,
		DependencyIndexes: file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_depIdxs,
		MessageInfos:      file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_msgTypes,
	}.Build()
	File_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto = out.File
	file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_rawDesc = nil
	file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_goTypes = nil
	file_binance_tsslib_v2_protob_ecdsa_keyshare_affine_transform_proto_depIdxs = nil
}
