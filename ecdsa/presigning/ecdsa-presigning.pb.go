// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: protob/ecdsa-presigning.proto

package presigning

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Represents a P2P message sent to each party during Round 1 of the ECDSA TSS signing protocol.
type PreSignRound1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K        []byte   `protobuf:"bytes,1,opt,name=K,proto3" json:"K,omitempty"`
	G        []byte   `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	EncProof [][]byte `protobuf:"bytes,3,rep,name=EncProof,proto3" json:"EncProof,omitempty"`
}

func (x *PreSignRound1Message) Reset() {
	*x = PreSignRound1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_presigning_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSignRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignRound1Message) ProtoMessage() {}

func (x *PreSignRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_presigning_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignRound1Message.ProtoReflect.Descriptor instead.
func (*PreSignRound1Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_presigning_proto_rawDescGZIP(), []int{0}
}

func (x *PreSignRound1Message) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *PreSignRound1Message) GetG() []byte {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *PreSignRound1Message) GetEncProof() [][]byte {
	if x != nil {
		return x.EncProof
	}
	return nil
}

//
// Represents a P2P message sent to each party during Round 2 of the ECDSA TSS signing protocol.
type PreSignRound2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigGammaShare  [][]byte `protobuf:"bytes,1,rep,name=BigGammaShare,proto3" json:"BigGammaShare,omitempty"`
	DjiDelta       []byte   `protobuf:"bytes,2,opt,name=DjiDelta,proto3" json:"DjiDelta,omitempty"`
	FjiDelta       []byte   `protobuf:"bytes,3,opt,name=FjiDelta,proto3" json:"FjiDelta,omitempty"`
	DjiChi         []byte   `protobuf:"bytes,4,opt,name=DjiChi,proto3" json:"DjiChi,omitempty"`
	FjiChi         []byte   `protobuf:"bytes,5,opt,name=FjiChi,proto3" json:"FjiChi,omitempty"`
	AffgProofDelta [][]byte `protobuf:"bytes,6,rep,name=AffgProofDelta,proto3" json:"AffgProofDelta,omitempty"`
	AffgProofChi   [][]byte `protobuf:"bytes,7,rep,name=AffgProofChi,proto3" json:"AffgProofChi,omitempty"`
	LogstarProof   [][]byte `protobuf:"bytes,8,rep,name=LogstarProof,proto3" json:"LogstarProof,omitempty"`
}

func (x *PreSignRound2Message) Reset() {
	*x = PreSignRound2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_presigning_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSignRound2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignRound2Message) ProtoMessage() {}

func (x *PreSignRound2Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_presigning_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignRound2Message.ProtoReflect.Descriptor instead.
func (*PreSignRound2Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_presigning_proto_rawDescGZIP(), []int{1}
}

func (x *PreSignRound2Message) GetBigGammaShare() [][]byte {
	if x != nil {
		return x.BigGammaShare
	}
	return nil
}

func (x *PreSignRound2Message) GetDjiDelta() []byte {
	if x != nil {
		return x.DjiDelta
	}
	return nil
}

func (x *PreSignRound2Message) GetFjiDelta() []byte {
	if x != nil {
		return x.FjiDelta
	}
	return nil
}

func (x *PreSignRound2Message) GetDjiChi() []byte {
	if x != nil {
		return x.DjiChi
	}
	return nil
}

func (x *PreSignRound2Message) GetFjiChi() []byte {
	if x != nil {
		return x.FjiChi
	}
	return nil
}

func (x *PreSignRound2Message) GetAffgProofDelta() [][]byte {
	if x != nil {
		return x.AffgProofDelta
	}
	return nil
}

func (x *PreSignRound2Message) GetAffgProofChi() [][]byte {
	if x != nil {
		return x.AffgProofChi
	}
	return nil
}

func (x *PreSignRound2Message) GetLogstarProof() [][]byte {
	if x != nil {
		return x.LogstarProof
	}
	return nil
}

//
// Represents a P2P message sent to all parties during Round 3 of the ECDSA TSS signing protocol.
type PreSignRound3Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeltaShare    []byte   `protobuf:"bytes,1,opt,name=DeltaShare,proto3" json:"DeltaShare,omitempty"`
	BigDeltaShare [][]byte `protobuf:"bytes,2,rep,name=BigDeltaShare,proto3" json:"BigDeltaShare,omitempty"`
	ProofLogstar  [][]byte `protobuf:"bytes,3,rep,name=ProofLogstar,proto3" json:"ProofLogstar,omitempty"`
}

func (x *PreSignRound3Message) Reset() {
	*x = PreSignRound3Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_presigning_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSignRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignRound3Message) ProtoMessage() {}

func (x *PreSignRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_presigning_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignRound3Message.ProtoReflect.Descriptor instead.
func (*PreSignRound3Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_presigning_proto_rawDescGZIP(), []int{2}
}

func (x *PreSignRound3Message) GetDeltaShare() []byte {
	if x != nil {
		return x.DeltaShare
	}
	return nil
}

func (x *PreSignRound3Message) GetBigDeltaShare() [][]byte {
	if x != nil {
		return x.BigDeltaShare
	}
	return nil
}

func (x *PreSignRound3Message) GetProofLogstar() [][]byte {
	if x != nil {
		return x.ProofLogstar
	}
	return nil
}

type IdentificationRound1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H         []byte   `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
	MulProof  [][]byte `protobuf:"bytes,2,rep,name=MulProof,proto3" json:"MulProof,omitempty"`
	Djis      [][]byte `protobuf:"bytes,3,rep,name=Djis,proto3" json:"Djis,omitempty"`
	Fjis      [][]byte `protobuf:"bytes,4,rep,name=Fjis,proto3" json:"Fjis,omitempty"`
	DjiProofs [][]byte `protobuf:"bytes,5,rep,name=DjiProofs,proto3" json:"DjiProofs,omitempty"`
	DecProof  [][]byte `protobuf:"bytes,6,rep,name=DecProof,proto3" json:"DecProof,omitempty"`
}

func (x *IdentificationRound1Message) Reset() {
	*x = IdentificationRound1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_presigning_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentificationRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationRound1Message) ProtoMessage() {}

func (x *IdentificationRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_presigning_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationRound1Message.ProtoReflect.Descriptor instead.
func (*IdentificationRound1Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_presigning_proto_rawDescGZIP(), []int{3}
}

func (x *IdentificationRound1Message) GetH() []byte {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *IdentificationRound1Message) GetMulProof() [][]byte {
	if x != nil {
		return x.MulProof
	}
	return nil
}

func (x *IdentificationRound1Message) GetDjis() [][]byte {
	if x != nil {
		return x.Djis
	}
	return nil
}

func (x *IdentificationRound1Message) GetFjis() [][]byte {
	if x != nil {
		return x.Fjis
	}
	return nil
}

func (x *IdentificationRound1Message) GetDjiProofs() [][]byte {
	if x != nil {
		return x.DjiProofs
	}
	return nil
}

func (x *IdentificationRound1Message) GetDecProof() [][]byte {
	if x != nil {
		return x.DecProof
	}
	return nil
}

//
// Container for output presignatures
type PreSignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int32    `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Ssid     []byte   `protobuf:"bytes,2,opt,name=Ssid,proto3" json:"Ssid,omitempty"`
	BigR     [][]byte `protobuf:"bytes,3,rep,name=bigR,proto3" json:"bigR,omitempty"`
	KShare   []byte   `protobuf:"bytes,4,opt,name=KShare,proto3" json:"KShare,omitempty"`
	ChiShare []byte   `protobuf:"bytes,5,opt,name=ChiShare,proto3" json:"ChiShare,omitempty"`
	// Transcript for signing identification
	LRK              []byte   `protobuf:"bytes,6,opt,name=LRK,proto3" json:"LRK,omitempty"`
	LRr1MsgK         [][]byte `protobuf:"bytes,7,rep,name=LRr1msgK,proto3" json:"LRr1msgK,omitempty"`
	LRChiShareAlphas [][]byte `protobuf:"bytes,8,rep,name=LRChiShareAlphas,proto3" json:"LRChiShareAlphas,omitempty"`
	LRChiShareBetas  [][]byte `protobuf:"bytes,9,rep,name=LRChiShareBetas,proto3" json:"LRChiShareBetas,omitempty"`
	LRr2MsgChiD      [][]byte `protobuf:"bytes,10,rep,name=LRr2msgChiD,proto3" json:"LRr2msgChiD,omitempty"`
	LRChiMtAFs       [][]byte `protobuf:"bytes,11,rep,name=LRChiMtAFs,proto3" json:"LRChiMtAFs,omitempty"`
	LRChiMtADs       [][]byte `protobuf:"bytes,12,rep,name=LRChiMtADs,proto3" json:"LRChiMtADs,omitempty"`
	LRChiMtADProofs  [][]byte `protobuf:"bytes,13,rep,name=LRChiMtADProofs,proto3" json:"LRChiMtADProofs,omitempty"`
}

func (x *PreSignatureData) Reset() {
	*x = PreSignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_presigning_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignatureData) ProtoMessage() {}

func (x *PreSignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_presigning_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignatureData.ProtoReflect.Descriptor instead.
func (*PreSignatureData) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_presigning_proto_rawDescGZIP(), []int{4}
}

func (x *PreSignatureData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PreSignatureData) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *PreSignatureData) GetBigR() [][]byte {
	if x != nil {
		return x.BigR
	}
	return nil
}

func (x *PreSignatureData) GetKShare() []byte {
	if x != nil {
		return x.KShare
	}
	return nil
}

func (x *PreSignatureData) GetChiShare() []byte {
	if x != nil {
		return x.ChiShare
	}
	return nil
}

func (x *PreSignatureData) GetLRK() []byte {
	if x != nil {
		return x.LRK
	}
	return nil
}

func (x *PreSignatureData) GetLRr1MsgK() [][]byte {
	if x != nil {
		return x.LRr1MsgK
	}
	return nil
}

func (x *PreSignatureData) GetLRChiShareAlphas() [][]byte {
	if x != nil {
		return x.LRChiShareAlphas
	}
	return nil
}

func (x *PreSignatureData) GetLRChiShareBetas() [][]byte {
	if x != nil {
		return x.LRChiShareBetas
	}
	return nil
}

func (x *PreSignatureData) GetLRr2MsgChiD() [][]byte {
	if x != nil {
		return x.LRr2MsgChiD
	}
	return nil
}

func (x *PreSignatureData) GetLRChiMtAFs() [][]byte {
	if x != nil {
		return x.LRChiMtAFs
	}
	return nil
}

func (x *PreSignatureData) GetLRChiMtADs() [][]byte {
	if x != nil {
		return x.LRChiMtADs
	}
	return nil
}

func (x *PreSignatureData) GetLRChiMtADProofs() [][]byte {
	if x != nil {
		return x.LRChiMtADProofs
	}
	return nil
}

//
// Container for LocalDump
type LocalDumpPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                int32    `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	RoundNum             int32    `protobuf:"varint,2,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	LTssid               []byte   `protobuf:"bytes,3,opt,name=LTssid,proto3" json:"LTssid,omitempty"`
	LTw                  []byte   `protobuf:"bytes,4,opt,name=LTw,proto3" json:"LTw,omitempty"`
	LTBigWs              [][]byte `protobuf:"bytes,5,rep,name=LTBigWs,proto3" json:"LTBigWs,omitempty"`
	LTKShare             []byte   `protobuf:"bytes,6,opt,name=LTKShare,proto3" json:"LTKShare,omitempty"`
	LTBigGammaShare      [][]byte `protobuf:"bytes,7,rep,name=LTBigGammaShare,proto3" json:"LTBigGammaShare,omitempty"`
	LTK                  []byte   `protobuf:"bytes,8,opt,name=LTK,proto3" json:"LTK,omitempty"`
	LTG                  []byte   `protobuf:"bytes,9,opt,name=LTG,proto3" json:"LTG,omitempty"`
	LTKNonce             []byte   `protobuf:"bytes,10,opt,name=LTKNonce,proto3" json:"LTKNonce,omitempty"`
	LTGNonce             []byte   `protobuf:"bytes,11,opt,name=LTGNonce,proto3" json:"LTGNonce,omitempty"` //bytes LTkeyDerivationDelta = 12;
	LTGammaShare         []byte   `protobuf:"bytes,13,opt,name=LTGammaShare,proto3" json:"LTGammaShare,omitempty"`
	LTDeltaShareBetas    [][]byte `protobuf:"bytes,14,rep,name=LTDeltaShareBetas,proto3" json:"LTDeltaShareBetas,omitempty"`
	LTChiShareBetas      [][]byte `protobuf:"bytes,15,rep,name=LTChiShareBetas,proto3" json:"LTChiShareBetas,omitempty"`
	LTBigGamma           [][]byte `protobuf:"bytes,16,rep,name=LTBigGamma,proto3" json:"LTBigGamma,omitempty"`
	LTDeltaShareAlphas   [][]byte `protobuf:"bytes,17,rep,name=LTDeltaShareAlphas,proto3" json:"LTDeltaShareAlphas,omitempty"`
	LTChiShareAlphas     [][]byte `protobuf:"bytes,18,rep,name=LTChiShareAlphas,proto3" json:"LTChiShareAlphas,omitempty"`
	LTDeltaShare         []byte   `protobuf:"bytes,19,opt,name=LTDeltaShare,proto3" json:"LTDeltaShare,omitempty"`
	LTChiShare           []byte   `protobuf:"bytes,20,opt,name=LTChiShare,proto3" json:"LTChiShare,omitempty"`
	LTBigDeltaShare      [][]byte `protobuf:"bytes,21,rep,name=LTBigDeltaShare,proto3" json:"LTBigDeltaShare,omitempty"`
	LTBigR               [][]byte `protobuf:"bytes,22,rep,name=LTBigR,proto3" json:"LTBigR,omitempty"`
	LTRx                 []byte   `protobuf:"bytes,23,opt,name=LTRx,proto3" json:"LTRx,omitempty"`
	LTSigmaShare         []byte   `protobuf:"bytes,24,opt,name=LTSigmaShare,proto3" json:"LTSigmaShare,omitempty"`
	LTr1MsgG             [][]byte `protobuf:"bytes,25,rep,name=LTr1msgG,proto3" json:"LTr1msgG,omitempty"`
	LTr1MsgK             [][]byte `protobuf:"bytes,26,rep,name=LTr1msgK,proto3" json:"LTr1msgK,omitempty"`
	LTr1MsgProof         [][]byte `protobuf:"bytes,27,rep,name=LTr1msgProof,proto3" json:"LTr1msgProof,omitempty"`
	LTr2MsgBigGammaShare [][]byte `protobuf:"bytes,28,rep,name=LTr2msgBigGammaShare,proto3" json:"LTr2msgBigGammaShare,omitempty"`
	LTr2MsgDeltaD        [][]byte `protobuf:"bytes,29,rep,name=LTr2msgDeltaD,proto3" json:"LTr2msgDeltaD,omitempty"`
	LTr2MsgDeltaF        [][]byte `protobuf:"bytes,30,rep,name=LTr2msgDeltaF,proto3" json:"LTr2msgDeltaF,omitempty"`
	LTr2MsgDeltaProof    [][]byte `protobuf:"bytes,31,rep,name=LTr2msgDeltaProof,proto3" json:"LTr2msgDeltaProof,omitempty"`
	LTr2MsgChiD          [][]byte `protobuf:"bytes,32,rep,name=LTr2msgChiD,proto3" json:"LTr2msgChiD,omitempty"`
	LTr2MsgChiF          [][]byte `protobuf:"bytes,33,rep,name=LTr2msgChiF,proto3" json:"LTr2msgChiF,omitempty"`
	LTr2MsgChiProof      [][]byte `protobuf:"bytes,34,rep,name=LTr2msgChiProof,proto3" json:"LTr2msgChiProof,omitempty"`
	LTr2MsgProofLogstar  [][]byte `protobuf:"bytes,35,rep,name=LTr2msgProofLogstar,proto3" json:"LTr2msgProofLogstar,omitempty"`
	LTr3MsgDeltaShare    [][]byte `protobuf:"bytes,36,rep,name=LTr3msgDeltaShare,proto3" json:"LTr3msgDeltaShare,omitempty"`
	LTr3MsgBigDeltaShare [][]byte `protobuf:"bytes,37,rep,name=LTr3msgBigDeltaShare,proto3" json:"LTr3msgBigDeltaShare,omitempty"`
	LTr3MsgProofLogstar  [][]byte `protobuf:"bytes,38,rep,name=LTr3msgProofLogstar,proto3" json:"LTr3msgProofLogstar,omitempty"`
	LTDeltaMtAFs         [][]byte `protobuf:"bytes,40,rep,name=LTDeltaMtAFs,proto3" json:"LTDeltaMtAFs,omitempty"`
	LTDeltaMtADs         [][]byte `protobuf:"bytes,41,rep,name=LTDeltaMtADs,proto3" json:"LTDeltaMtADs,omitempty"`
	LDDeltaMtADProofs    [][]byte `protobuf:"bytes,42,rep,name=LDDeltaMtADProofs,proto3" json:"LDDeltaMtADProofs,omitempty"`
	LTChiMtAFs           [][]byte `protobuf:"bytes,43,rep,name=LTChiMtAFs,proto3" json:"LTChiMtAFs,omitempty"`
	LTChiMtADs           [][]byte `protobuf:"bytes,44,rep,name=LTChiMtADs,proto3" json:"LTChiMtADs,omitempty"`
	LTChiMtADProofs      [][]byte `protobuf:"bytes,45,rep,name=LTChiMtADProofs,proto3" json:"LTChiMtADProofs,omitempty"`
	LTr5MsgH             [][]byte `protobuf:"bytes,46,rep,name=LTr5msgH,proto3" json:"LTr5msgH,omitempty"`
	LTr5MsgProofMul      [][]byte `protobuf:"bytes,47,rep,name=LTr5msgProofMul,proto3" json:"LTr5msgProofMul,omitempty"`
	// repeated bytes LTr5msgDeltaShareEnc = 46;
	LTr5MsgProofDec [][]byte `protobuf:"bytes,48,rep,name=LTr5msgProofDec,proto3" json:"LTr5msgProofDec,omitempty"`
	LTr5MsgDjis     [][]byte `protobuf:"bytes,49,rep,name=LTr5msgDjis,proto3" json:"LTr5msgDjis,omitempty"`
	LTr5MsgFjis     [][]byte `protobuf:"bytes,50,rep,name=LTr5msgFjis,proto3" json:"LTr5msgFjis,omitempty"` //repeated bytes LTr5msgQ3Enc = 51;
}

func (x *LocalDumpPB) Reset() {
	*x = LocalDumpPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_presigning_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDumpPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDumpPB) ProtoMessage() {}

func (x *LocalDumpPB) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_presigning_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDumpPB.ProtoReflect.Descriptor instead.
func (*LocalDumpPB) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_presigning_proto_rawDescGZIP(), []int{5}
}

func (x *LocalDumpPB) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LocalDumpPB) GetRoundNum() int32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *LocalDumpPB) GetLTssid() []byte {
	if x != nil {
		return x.LTssid
	}
	return nil
}

func (x *LocalDumpPB) GetLTw() []byte {
	if x != nil {
		return x.LTw
	}
	return nil
}

func (x *LocalDumpPB) GetLTBigWs() [][]byte {
	if x != nil {
		return x.LTBigWs
	}
	return nil
}

func (x *LocalDumpPB) GetLTKShare() []byte {
	if x != nil {
		return x.LTKShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTBigGammaShare() [][]byte {
	if x != nil {
		return x.LTBigGammaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTK() []byte {
	if x != nil {
		return x.LTK
	}
	return nil
}

func (x *LocalDumpPB) GetLTG() []byte {
	if x != nil {
		return x.LTG
	}
	return nil
}

func (x *LocalDumpPB) GetLTKNonce() []byte {
	if x != nil {
		return x.LTKNonce
	}
	return nil
}

func (x *LocalDumpPB) GetLTGNonce() []byte {
	if x != nil {
		return x.LTGNonce
	}
	return nil
}

func (x *LocalDumpPB) GetLTGammaShare() []byte {
	if x != nil {
		return x.LTGammaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTDeltaShareBetas() [][]byte {
	if x != nil {
		return x.LTDeltaShareBetas
	}
	return nil
}

func (x *LocalDumpPB) GetLTChiShareBetas() [][]byte {
	if x != nil {
		return x.LTChiShareBetas
	}
	return nil
}

func (x *LocalDumpPB) GetLTBigGamma() [][]byte {
	if x != nil {
		return x.LTBigGamma
	}
	return nil
}

func (x *LocalDumpPB) GetLTDeltaShareAlphas() [][]byte {
	if x != nil {
		return x.LTDeltaShareAlphas
	}
	return nil
}

func (x *LocalDumpPB) GetLTChiShareAlphas() [][]byte {
	if x != nil {
		return x.LTChiShareAlphas
	}
	return nil
}

func (x *LocalDumpPB) GetLTDeltaShare() []byte {
	if x != nil {
		return x.LTDeltaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTChiShare() []byte {
	if x != nil {
		return x.LTChiShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTBigDeltaShare() [][]byte {
	if x != nil {
		return x.LTBigDeltaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTBigR() [][]byte {
	if x != nil {
		return x.LTBigR
	}
	return nil
}

func (x *LocalDumpPB) GetLTRx() []byte {
	if x != nil {
		return x.LTRx
	}
	return nil
}

func (x *LocalDumpPB) GetLTSigmaShare() []byte {
	if x != nil {
		return x.LTSigmaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTr1MsgG() [][]byte {
	if x != nil {
		return x.LTr1MsgG
	}
	return nil
}

func (x *LocalDumpPB) GetLTr1MsgK() [][]byte {
	if x != nil {
		return x.LTr1MsgK
	}
	return nil
}

func (x *LocalDumpPB) GetLTr1MsgProof() [][]byte {
	if x != nil {
		return x.LTr1MsgProof
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgBigGammaShare() [][]byte {
	if x != nil {
		return x.LTr2MsgBigGammaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgDeltaD() [][]byte {
	if x != nil {
		return x.LTr2MsgDeltaD
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgDeltaF() [][]byte {
	if x != nil {
		return x.LTr2MsgDeltaF
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgDeltaProof() [][]byte {
	if x != nil {
		return x.LTr2MsgDeltaProof
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgChiD() [][]byte {
	if x != nil {
		return x.LTr2MsgChiD
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgChiF() [][]byte {
	if x != nil {
		return x.LTr2MsgChiF
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgChiProof() [][]byte {
	if x != nil {
		return x.LTr2MsgChiProof
	}
	return nil
}

func (x *LocalDumpPB) GetLTr2MsgProofLogstar() [][]byte {
	if x != nil {
		return x.LTr2MsgProofLogstar
	}
	return nil
}

func (x *LocalDumpPB) GetLTr3MsgDeltaShare() [][]byte {
	if x != nil {
		return x.LTr3MsgDeltaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTr3MsgBigDeltaShare() [][]byte {
	if x != nil {
		return x.LTr3MsgBigDeltaShare
	}
	return nil
}

func (x *LocalDumpPB) GetLTr3MsgProofLogstar() [][]byte {
	if x != nil {
		return x.LTr3MsgProofLogstar
	}
	return nil
}

func (x *LocalDumpPB) GetLTDeltaMtAFs() [][]byte {
	if x != nil {
		return x.LTDeltaMtAFs
	}
	return nil
}

func (x *LocalDumpPB) GetLTDeltaMtADs() [][]byte {
	if x != nil {
		return x.LTDeltaMtADs
	}
	return nil
}

func (x *LocalDumpPB) GetLDDeltaMtADProofs() [][]byte {
	if x != nil {
		return x.LDDeltaMtADProofs
	}
	return nil
}

func (x *LocalDumpPB) GetLTChiMtAFs() [][]byte {
	if x != nil {
		return x.LTChiMtAFs
	}
	return nil
}

func (x *LocalDumpPB) GetLTChiMtADs() [][]byte {
	if x != nil {
		return x.LTChiMtADs
	}
	return nil
}

func (x *LocalDumpPB) GetLTChiMtADProofs() [][]byte {
	if x != nil {
		return x.LTChiMtADProofs
	}
	return nil
}

func (x *LocalDumpPB) GetLTr5MsgH() [][]byte {
	if x != nil {
		return x.LTr5MsgH
	}
	return nil
}

func (x *LocalDumpPB) GetLTr5MsgProofMul() [][]byte {
	if x != nil {
		return x.LTr5MsgProofMul
	}
	return nil
}

func (x *LocalDumpPB) GetLTr5MsgProofDec() [][]byte {
	if x != nil {
		return x.LTr5MsgProofDec
	}
	return nil
}

func (x *LocalDumpPB) GetLTr5MsgDjis() [][]byte {
	if x != nil {
		return x.LTr5MsgDjis
	}
	return nil
}

func (x *LocalDumpPB) GetLTr5MsgFjis() [][]byte {
	if x != nil {
		return x.LTr5MsgFjis
	}
	return nil
}

var File_protob_ecdsa_presigning_proto protoreflect.FileDescriptor

var file_protob_ecdsa_presigning_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2d, 0x70,
	0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e,
	0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x4e, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x4b, 0x12, 0x0c, 0x0a, 0x01, 0x47, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x47, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x94, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67,
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0d, 0x42, 0x69, 0x67, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x44, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x6a, 0x69, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x46,
	0x6a, 0x69, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6a, 0x69, 0x43, 0x68,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x44, 0x6a, 0x69, 0x43, 0x68, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6a, 0x69, 0x43, 0x68, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x46, 0x6a, 0x69, 0x43, 0x68, 0x69, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x66, 0x67, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0e, 0x41, 0x66, 0x66, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x66, 0x66, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x68, 0x69, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x41, 0x66, 0x66, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x43, 0x68, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x72, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x4c, 0x6f, 0x67, 0x73, 0x74,
	0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4c,
	0x6f, 0x67, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x4c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x48, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x48, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x75, 0x6c, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6a, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x6a, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6a, 0x69, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x46, 0x6a, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x6a, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x44, 0x6a, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x44, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x94, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x53, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x67, 0x52, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x69, 0x67, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4c, 0x52, 0x4b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4c, 0x52, 0x4b, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x52, 0x72, 0x31, 0x6d, 0x73, 0x67, 0x4b, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x4c, 0x52, 0x72, 0x31, 0x6d, 0x73, 0x67, 0x4b, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x52, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x52, 0x43, 0x68, 0x69,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x65, 0x74, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0f, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x65, 0x74, 0x61,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x52, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x69, 0x44,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x4c, 0x52, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x43,
	0x68, 0x69, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x46,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x4d, 0x74,
	0x41, 0x46, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x44,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x4d, 0x74,
	0x41, 0x44, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x52, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x44,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x52,
	0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x44, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xad, 0x0d,
	0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x42, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x54, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x4c, 0x54, 0x73, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x54, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4c, 0x54, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x54, 0x42,
	0x69, 0x67, 0x57, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x4c, 0x54, 0x42, 0x69,
	0x67, 0x57, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x54, 0x4b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x54, 0x4b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x42, 0x69, 0x67, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x54, 0x42, 0x69, 0x67, 0x47,
	0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x54, 0x4b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4c, 0x54, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x4c,
	0x54, 0x47, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4c, 0x54, 0x47, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x54, 0x4b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x4c, 0x54, 0x4b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x54, 0x47,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x54, 0x47,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x54, 0x47, 0x61, 0x6d, 0x6d, 0x61,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4c, 0x54, 0x47,
	0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x54, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x65, 0x74, 0x61, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x42, 0x65, 0x74, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x43, 0x68, 0x69,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x65, 0x74, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0f, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x65, 0x74, 0x61,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x54, 0x42, 0x69, 0x67, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x54, 0x42, 0x69, 0x67, 0x47, 0x61, 0x6d, 0x6d,
	0x61, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x4c,
	0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x54, 0x43,
	0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x42, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x54, 0x42, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c,
	0x54, 0x42, 0x69, 0x67, 0x52, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x4c, 0x54, 0x42,
	0x69, 0x67, 0x52, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x54, 0x52, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x4c, 0x54, 0x52, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x54, 0x53, 0x69, 0x67,
	0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4c,
	0x54, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x54, 0x72, 0x31, 0x6d, 0x73, 0x67, 0x47, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x4c,
	0x54, 0x72, 0x31, 0x6d, 0x73, 0x67, 0x47, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x54, 0x72, 0x31, 0x6d,
	0x73, 0x67, 0x4b, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x54, 0x72, 0x31, 0x6d,
	0x73, 0x67, 0x4b, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x54, 0x72, 0x31, 0x6d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x4c, 0x54, 0x72, 0x31, 0x6d,
	0x73, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x54, 0x72, 0x32, 0x6d,
	0x73, 0x67, 0x42, 0x69, 0x67, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x42, 0x69,
	0x67, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0d, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x46, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73,
	0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x54, 0x72, 0x32, 0x6d,
	0x73, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x11, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67,
	0x43, 0x68, 0x69, 0x44, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x4c, 0x54, 0x72, 0x32,
	0x6d, 0x73, 0x67, 0x43, 0x68, 0x69, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x54, 0x72, 0x32, 0x6d,
	0x73, 0x67, 0x43, 0x68, 0x69, 0x46, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x4c, 0x54,
	0x72, 0x32, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x69, 0x46, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x72,
	0x32, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x69, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x4c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x72, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x13, 0x4c, 0x54, 0x72, 0x32, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x6f,
	0x67, 0x73, 0x74, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x54, 0x72, 0x33, 0x6d, 0x73, 0x67,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x11, 0x4c, 0x54, 0x72, 0x33, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x54, 0x72, 0x33, 0x6d, 0x73, 0x67, 0x42, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x25, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x14, 0x4c, 0x54, 0x72, 0x33, 0x6d, 0x73, 0x67, 0x42, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x54, 0x72, 0x33, 0x6d,
	0x73, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x72, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x4c, 0x54, 0x72, 0x33, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4c, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x54, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4d, 0x74, 0x41, 0x46, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x74, 0x41, 0x46, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x74, 0x41, 0x44, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0c, 0x4c, 0x54, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x74, 0x41, 0x44,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x44, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x74, 0x41, 0x44,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x4c, 0x44,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x74, 0x41, 0x44, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x46, 0x73, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x46, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x44, 0x73, 0x18, 0x2c, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x44, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x4d, 0x74, 0x41, 0x44, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x54, 0x43, 0x68, 0x69, 0x4d,
	0x74, 0x41, 0x44, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x54, 0x72,
	0x35, 0x6d, 0x73, 0x67, 0x48, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x54, 0x72,
	0x35, 0x6d, 0x73, 0x67, 0x48, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x72, 0x35, 0x6d, 0x73, 0x67,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x75, 0x6c, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f,
	0x4c, 0x54, 0x72, 0x35, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x75, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x4c, 0x54, 0x72, 0x35, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44,
	0x65, 0x63, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x4c, 0x54, 0x72, 0x35, 0x6d, 0x73,
	0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x54, 0x72,
	0x35, 0x6d, 0x73, 0x67, 0x44, 0x6a, 0x69, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x4c, 0x54, 0x72, 0x35, 0x6d, 0x73, 0x67, 0x44, 0x6a, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c,
	0x54, 0x72, 0x35, 0x6d, 0x73, 0x67, 0x46, 0x6a, 0x69, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0b, 0x4c, 0x54, 0x72, 0x35, 0x6d, 0x73, 0x67, 0x46, 0x6a, 0x69, 0x73, 0x42, 0x12, 0x5a,
	0x10, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protob_ecdsa_presigning_proto_rawDescOnce sync.Once
	file_protob_ecdsa_presigning_proto_rawDescData = file_protob_ecdsa_presigning_proto_rawDesc
)

func file_protob_ecdsa_presigning_proto_rawDescGZIP() []byte {
	file_protob_ecdsa_presigning_proto_rawDescOnce.Do(func() {
		file_protob_ecdsa_presigning_proto_rawDescData = protoimpl.X.CompressGZIP(file_protob_ecdsa_presigning_proto_rawDescData)
	})
	return file_protob_ecdsa_presigning_proto_rawDescData
}

var file_protob_ecdsa_presigning_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protob_ecdsa_presigning_proto_goTypes = []interface{}{
	(*PreSignRound1Message)(nil),        // 0: binance.tsslib.ecdsa.presigning.PreSignRound1Message
	(*PreSignRound2Message)(nil),        // 1: binance.tsslib.ecdsa.presigning.PreSignRound2Message
	(*PreSignRound3Message)(nil),        // 2: binance.tsslib.ecdsa.presigning.PreSignRound3Message
	(*IdentificationRound1Message)(nil), // 3: binance.tsslib.ecdsa.presigning.IdentificationRound1Message
	(*PreSignatureData)(nil),            // 4: binance.tsslib.ecdsa.presigning.PreSignatureData
	(*LocalDumpPB)(nil),                 // 5: binance.tsslib.ecdsa.presigning.LocalDumpPB
}
var file_protob_ecdsa_presigning_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protob_ecdsa_presigning_proto_init() }
func file_protob_ecdsa_presigning_proto_init() {
	if File_protob_ecdsa_presigning_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protob_ecdsa_presigning_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSignRound1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_presigning_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSignRound2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_presigning_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSignRound3Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_presigning_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentificationRound1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_presigning_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_presigning_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalDumpPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protob_ecdsa_presigning_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protob_ecdsa_presigning_proto_goTypes,
		DependencyIndexes: file_protob_ecdsa_presigning_proto_depIdxs,
		MessageInfos:      file_protob_ecdsa_presigning_proto_msgTypes,
	}.Build()
	File_protob_ecdsa_presigning_proto = out.File
	file_protob_ecdsa_presigning_proto_rawDesc = nil
	file_protob_ecdsa_presigning_proto_goTypes = nil
	file_protob_ecdsa_presigning_proto_depIdxs = nil
}
